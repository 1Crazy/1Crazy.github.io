{"title":"ES6","slug":"es6","date":"2019-03-22T13:05:06.000Z","updated":"2019-04-05T03:41:51.273Z","comments":true,"excerpt":"","content":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"var和let之间的差异\"><a href=\"#var和let之间的差异\" class=\"headerlink\" title=\"var和let之间的差异\"></a>var和let之间的差异</h2><p>使用var关键字来声明变量，会出现重复声明导致变量被覆盖却不会报错的问题：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> camper = <span class=\"string\">'James'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> camper = <span class=\"string\">'David'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(camper);</span><br><span class=\"line\"><span class=\"comment\">// 打印出 'David'</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码中，<figure class=\"highlight plain\"><figcaption><span>```debug ```非常困难。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### 在 ES6 中引入了新的关键字```let```来解决```var```关键字带来的潜在问题。</span><br><span class=\"line\">如果你在上面的代码中，使用了```let```关键字来代替```var```关键字，结果会是一个报错。</span><br><span class=\"line\">``` js</span><br><span class=\"line\">let camper = &apos;James&apos;;</span><br><span class=\"line\">let camper = &apos;David&apos;; // 报错</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"var-和-let-关键字的作用域\"><a href=\"#var-和-let-关键字的作用域\" class=\"headerlink\" title=\"var 和 let 关键字的作用域\"></a>var 和 let 关键字的作用域</h2><p>当你使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```let```关键字的作用类似，但会有一些额外的特性。如果你在代码块、语句或表达式中使用关键字```let```声明变量，这个变量的作用域就被限制在当前的代码块，语句或表达式之中。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 例:</span><br><span class=\"line\">``` js</span><br><span class=\"line\">var numArray = [];</span><br><span class=\"line\">for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  numArray.push(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(numArray);</span><br><span class=\"line\">// 返回 [0, 1, 2]</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">// 返回 3</span><br></pre></td></tr></table></figure></p>\n<p>当使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">var numArray = [];</span><br><span class=\"line\">var i;</span><br><span class=\"line\">for (i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  numArray.push(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(numArray);</span><br><span class=\"line\">// returns [0, 1, 2]</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">// returns 3</span><br></pre></td></tr></table></figure></p>\n<p>如果你在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">var printNumTwo;</span><br><span class=\"line\">for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  if(i === 2)&#123;</span><br><span class=\"line\">    printNumTwo = function() &#123;</span><br><span class=\"line\">      return i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(printNumTwo());</span><br><span class=\"line\">// 返回 3</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<figure class=\"highlight plain\"><figcaption><span>3 而不是 2。这是因为```i```发生了改变，并且函数```printNumTwo()```返回的是```全局变量i```的值，而不是```for```循环中创建函数时i的值。```let```关键字就不会有这种现象：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">let printNumTwo;</span><br><span class=\"line\">for (let i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  if (i === 2) &#123;</span><br><span class=\"line\">    printNumTwo = function() &#123;</span><br><span class=\"line\">      return i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(printNumTwo());</span><br><span class=\"line\">// 返回 2</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">// 返回 &quot;没有定义 i 变量&quot;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><figcaption><span>0、1 和 2，所以```printNumTwo()```返回了正确的值。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 用 const 关键字声明只读变量</span><br><span class=\"line\">```let```并不是唯一的新的声明变量的方式。在``` ES6```里面，你还可以使用```const```关键字来声明变量。</span><br><span class=\"line\">```const```拥有```let```的所有优点，所不同的是，```const```声明的变量只能被赋值一次，而不能被再次赋值。对使用```const```声明的变量进行最佳实践的重命名，变量名中的字母应该都是大写的。</span><br><span class=\"line\">#### 例</span><br><span class=\"line\">``` js</span><br><span class=\"line\">&quot;use strict&quot;</span><br><span class=\"line\">const FAV_PET = &quot;Cats&quot;;</span><br><span class=\"line\">FAV_PET = &quot;Dogs&quot;; // 报错</span><br></pre></td></tr></table></figure>\n<h2 id=\"改变一个用-const-声明的数组\"><a href=\"#改变一个用-const-声明的数组\" class=\"headerlink\" title=\"改变一个用 const 声明的数组\"></a>改变一个用 const 声明的数组</h2><p>对象（包括数组和函数）在使用const声明的时候依然是可变的。使用const来声明只会保证它的标识不会被重新赋值。</p>\n<h4 id=\"例\"><a href=\"#例\" class=\"headerlink\" title=\"例\"></a>例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> s = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// 试图给 const 变量赋值，报错</span></span><br><span class=\"line\">s[<span class=\"number\">2</span>] = <span class=\"number\">45</span>; <span class=\"comment\">// 与用 var 或 let 声明的数组一样，这个操作也会成功</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s); <span class=\"comment\">// 返回 [5, 6, 45]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-freeze—防止对象改变\"><a href=\"#Object-freeze—防止对象改变\" class=\"headerlink\" title=\"Object.freeze—防止对象改变\"></a>Object.freeze—防止对象改变</h2><figure class=\"highlight plain\"><figcaption><span>```提供了一个函数```Object.freeze```来防止数据改变。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当一个对象被冻结的时候，不能再对它的属性再进行增、删、改的操作。任何试图改变对象的操作都会被阻止，却不会报错。</span><br><span class=\"line\">###### 例</span><br><span class=\"line\">``` js</span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  name:&quot;FreeCodeCamp&quot;,</span><br><span class=\"line\">  review:&quot;Awesome&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Object.freeze(obj);</span><br><span class=\"line\">obj.review = &quot;bad&quot;; // obj 对象被冻结了，这个操作会被忽略</span><br><span class=\"line\">obj.newProp = &quot;Test&quot;; // 也会被忽略，不允许数据改变</span><br><span class=\"line\">console.log(obj); </span><br><span class=\"line\">// &#123; name: &quot;FreeCodeCamp&quot;, review:&quot;Awesome&quot;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用箭头函数编写简洁的匿名函数\"><a href=\"#使用箭头函数编写简洁的匿名函数\" class=\"headerlink\" title=\"使用箭头函数编写简洁的匿名函数\"></a>使用箭头函数编写简洁的匿名函数</h2><p>在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这种情况下，我们通常会使用以下语法：</span><br><span class=\"line\">``` js</span><br><span class=\"line\">const myFunc = function() &#123;</span><br><span class=\"line\">  const myVar = &quot;value&quot;;</span><br><span class=\"line\">  return myVar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6 提供了其他写匿名函数的方式的语法糖。可以使用箭头函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> myVar = <span class=\"string\">\"value\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> myVar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当不需要函数体，只返回一个值的时候，箭头函数允许你省略<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">const myFunc= () =&gt; &quot;value&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写带参数的箭头函数\"><a href=\"#编写带参数的箭头函数\" class=\"headerlink\" title=\"编写带参数的箭头函数\"></a>编写带参数的箭头函数</h2><p>和一般的函数一样，你也可以给箭头函数传递参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给传入的数值乘以 2 并返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> doubler = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>当参数只有一个时，可以简化括号即：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> doubler = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写高阶箭头函数\"><a href=\"#编写高阶箭头函数\" class=\"headerlink\" title=\"编写高阶箭头函数\"></a>编写高阶箭头函数</h2><p>箭头函数在类似<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">FBPosts.filter(function(post) &#123;</span><br><span class=\"line\">  return post.thumbnail !== null &amp;&amp; post.shares &gt; 100 &amp;&amp; post.likes &gt; 500;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FBPosts.filter(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> post.thumbnail !== <span class=\"literal\">null</span> &amp;&amp; post.shares &gt; <span class=\"number\">100</span> &amp;&amp; post.likes &gt; <span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置函数的默认参数\"><a href=\"#设置函数的默认参数\" class=\"headerlink\" title=\"设置函数的默认参数\"></a>设置函数的默认参数</h2><figure class=\"highlight plain\"><figcaption><span>里允许给函数传入默认参数，来构建更加灵活的函数。默认参数会在参数没有被指定（值为 ```undefined``` ）的时候起作用。如下：参数```name```会在没有得到新的值的时候，默认使用值 ```\"Anonymous\"```。你还可以给多个参数赋予默认值。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">function greeting(name = &quot;Anonymous&quot;) &#123;</span><br><span class=\"line\">  return &quot;Hello &quot; + name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(greeting(&quot;John&quot;)); // Hello John</span><br><span class=\"line\">console.log(greeting()); // Hello Anonymous</span><br></pre></td></tr></table></figure>\n<h2 id=\"将-rest-操作符与函数参数一起使用\"><a href=\"#将-rest-操作符与函数参数一起使用\" class=\"headerlink\" title=\"将 rest 操作符与函数参数一起使用\"></a>将 rest 操作符与函数参数一起使用</h2><figure class=\"highlight plain\"><figcaption><span>推出了用于函数参数的``` rest 操作符```帮助我们创建更加灵活的函数。在```rest操作符```的帮助下，你可以创建有一个变量来接受多个参数的函数。这些参数被储存在一个可以在函数内部读取的数组中。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">function howMany(...args) &#123;</span><br><span class=\"line\">  return &quot;You have passed &quot; + args.length + &quot; arguments.&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(howMany(0, 1, 2)); // 输出：You have passed 3 arguments.</span><br><span class=\"line\">console.log(howMany(&quot;string&quot;, null, [1, 2, 3], &#123; &#125;)); // 输出：You have passed 4 arguments.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改```sum```函数，来让它使用```rest操作符```，并且它可以在有任何数量的参数时以相同的形式工作。</span><br><span class=\"line\">``` js</span><br><span class=\"line\">const sum = (function() &#123;</span><br><span class=\"line\">  &quot;use strict&quot;;</span><br><span class=\"line\">  return function sum( ...args ) &#123;</span><br><span class=\"line\">    return args.reduce((a, b) =&gt; a + b, 0);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">console.log(sum(1, 2, 3)); // 6</span><br></pre></td></tr></table></figure>","thumbnail":"/img/timg3.jpg","categories":[],"tags":[]}