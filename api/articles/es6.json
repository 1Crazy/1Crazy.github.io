{"title":"ES6","slug":"es6","date":"2019-03-22T13:05:06.000Z","updated":"2019-04-07T00:13:50.281Z","comments":true,"excerpt":"","content":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"var和let之间的差异\"><a href=\"#var和let之间的差异\" class=\"headerlink\" title=\"var和let之间的差异\"></a>var和let之间的差异</h2><p>使用var关键字来声明变量，会出现重复声明导致变量被覆盖却不会报错的问题：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> camper = <span class=\"string\">'James'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> camper = <span class=\"string\">'David'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(camper);</span><br><span class=\"line\"><span class=\"comment\">// 打印出 'David'</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码中，<span style=\"color:#d14\">camper</span>的初始值为<span style=\"color:#d14\">James</span>，然后又被覆盖成了<span style=\"color:#d14\">David</span>。在小型的应用中，你可能不会遇到这样的问题，但是当你的代码规模变得更加庞大的时候，就可能会在不经意间覆盖了之前定义的变量。这样的行为不会报错，导致了<span style=\"color:#d14\">debug</span> 非常困难。</p>\n<p style=\"color:rgb(33, 150, 243)\">在 ES6 中引入了新的关键字let来解决var关键字带来的潜在问题。</p>\n\n<p>如果你在上面的代码中，使用了<span style=\"color:#d14\">let</span>关键字来代替<span style=\"color:#d14\">var</span>关键字，结果会是一个报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> camper = <span class=\"string\">'James'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> camper = <span class=\"string\">'David'</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"var-和-let-关键字的作用域\"><a href=\"#var-和-let-关键字的作用域\" class=\"headerlink\" title=\"var 和 let 关键字的作用域\"></a>var 和 let 关键字的作用域</h2><p>当你使用<span style=\"color:#d14\">var</span>关键字来声明一个变量的时候，这个变量会被声明成全局变量，或是函数内的局部变量。<br><span style=\"color:#d14\">let</span>关键字的作用类似，但会有一些额外的特性。如果你在代码块、语句或表达式中使用关键字<span style=\"color:#d14\">let</span>声明变量，这个变量的作用域就被限制在当前的代码块，语句或表达式之中。</p>\n<p style=\"color:rgb(33, 150, 243)\">例</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numArray = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  numArray.push(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numArray);</span><br><span class=\"line\"><span class=\"comment\">// 返回 [0, 1, 2]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"><span class=\"comment\">// 返回 3</span></span><br></pre></td></tr></table></figure>\n<p>当使用<span style=\"color:#d14\">var</span>关键字的时候，<span style=\"color:#d14\">i</span>会被声明成全局变量。当<span style=\"color:#d14\">i++</span>执行的时候，它会改变全局变量的值,上面代码与下面一个意思</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numArray = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  numArray.push(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numArray);</span><br><span class=\"line\"><span class=\"comment\">// returns [0, 1, 2]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"><span class=\"comment\">// returns 3</span></span><br></pre></td></tr></table></figure>\n<p>如果你在<span style=\"color:#d14\">for</span>循环中创建了使用<span style=\"color:#d14\">i</span>变量的函数，那么在后续调用函数的时候，上面提到的这种行为就会导致问题。这是因为函数存储的值会因为<span style=\"color:#d14\">全局变量i</span>的变化而不断的改变。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> printNumTwo;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    printNumTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(printNumTwo());</span><br><span class=\"line\"><span class=\"comment\">// 返回 3</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到<span style=\"color:#d14\">printNumTwo()</span>打印了 3 而不是 2。这是因为<span style=\"color:#d14\">i</span>发生了改变，并且函数<span style=\"color:#d14\">printNumTwo()</span>返回的是<span style=\"color:#d14\">全局变量i</span>的值，而不是<span style=\"color:#d14\">for</span>循环中创建函数时i的值。<span style=\"color:#d14\">let</span>关键字就不会有这种现象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> printNumTwo;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    printNumTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(printNumTwo());</span><br><span class=\"line\"><span class=\"comment\">// 返回 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\"><span class=\"comment\">// 返回 \"没有定义 i 变量\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>0、1 和 2，所以```printNumTwo()```返回了正确的值。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 用 const 关键字声明只读变量</span><br><span class=\"line\">```let```并不是唯一的新的声明变量的方式。在``` ES6```里面，你还可以使用```const```关键字来声明变量。</span><br><span class=\"line\">```const```拥有```let```的所有优点，所不同的是，```const```声明的变量只能被赋值一次，而不能被再次赋值。对使用```const```声明的变量进行最佳实践的重命名，变量名中的字母应该都是大写的。</span><br><span class=\"line\">&lt;p style=&quot;color:rgb(33, 150, 243)&quot;&gt;例&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">``` js</span><br><span class=\"line\">&quot;use strict&quot;</span><br><span class=\"line\">const FAV_PET = &quot;Cats&quot;;</span><br><span class=\"line\">FAV_PET = &quot;Dogs&quot;; // 报错</span><br></pre></td></tr></table></figure>\n<h2 id=\"改变一个用-const-声明的数组\"><a href=\"#改变一个用-const-声明的数组\" class=\"headerlink\" title=\"改变一个用 const 声明的数组\"></a>改变一个用 const 声明的数组</h2><p>对象（包括数组和函数）在使用const声明的时候依然是可变的。使用const来声明只会保证它的标识不会被重新赋值。</p>\n<p style=\"color:rgb(33, 150, 243)\">例</p><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> s = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// 试图给 const 变量赋值，报错</span></span><br><span class=\"line\">s[<span class=\"number\">2</span>] = <span class=\"number\">45</span>; <span class=\"comment\">// 与用 var 或 let 声明的数组一样，这个操作也会成功</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s); <span class=\"comment\">// 返回 [5, 6, 45]</span></span><br></pre></td></tr></table></figure><br><br>## Object.freeze—防止对象改变<br><span style=\"color:#d14\">const声明</span>并不会真的保护你的数据不被改变。为了确保数据不被改变，<span style=\"color:#d14\">JavaScript</span>提供了一个函数<span style=\"color:#d14\">Object.freeze</span>来防止数据改变。<br>当一个对象被冻结的时候，不能再对它的属性再进行增、删、改的操作。任何试图改变对象的操作都会被阻止，却不会报错。<br><p style=\"color:rgb(33, 150, 243)\">例</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">\"FreeCodeCamp\"</span>,</span><br><span class=\"line\">  review:<span class=\"string\">\"Awesome\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">obj.review = <span class=\"string\">\"bad\"</span>; <span class=\"comment\">// obj 对象被冻结了，这个操作会被忽略</span></span><br><span class=\"line\">obj.newProp = <span class=\"string\">\"Test\"</span>; <span class=\"comment\">// 也会被忽略，不允许数据改变</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); </span><br><span class=\"line\"><span class=\"comment\">// &#123; name: \"FreeCodeCamp\", review:\"Awesome\"&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用箭头函数编写简洁的匿名函数\"><a href=\"#使用箭头函数编写简洁的匿名函数\" class=\"headerlink\" title=\"使用箭头函数编写简洁的匿名函数\"></a>使用箭头函数编写简洁的匿名函数</h2><p>在<span style=\"color:#d14\">JavaScript</span>里，我们会经常遇到不需要给函数命名的情况，尤其是在需要将一个函数作为参数传给另外一个函数的时候。这时，我们会创建匿名函数。因为这些函数不会在其他地方复用，所以我们不需要给它们命名。<br>这种情况下，我们通常会使用以下语法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> myVar = <span class=\"string\">\"value\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> myVar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6 提供了其他写匿名函数的方式的语法糖。可以使用箭头函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> myVar = <span class=\"string\">\"value\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> myVar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当不需要函数体，只返回一个值的时候，箭头函数允许你省略<span style=\"color:#d14\">return</span>关键字和外面的大括号。这样就可以将一个简单的函数简化成一个单行语句。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myFunc= <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">\"value\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写带参数的箭头函数\"><a href=\"#编写带参数的箭头函数\" class=\"headerlink\" title=\"编写带参数的箭头函数\"></a>编写带参数的箭头函数</h2><p>和一般的函数一样，你也可以给箭头函数传递参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给传入的数值乘以 2 并返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> doubler = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>当参数只有一个时，可以简化括号即：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> doubler = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写高阶箭头函数\"><a href=\"#编写高阶箭头函数\" class=\"headerlink\" title=\"编写高阶箭头函数\"></a>编写高阶箭头函数</h2><p>箭头函数在类似<span style=\"color:#d14\">map()</span>，<span style=\"color:#d14\">filter()</span>，<span style=\"color:#d14\">reduce()</span>等需要其他函数作为参数来处理数据的高阶函数里会很好用。对比如下，箭头函数可读性更强：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FBPosts.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> post.thumbnail !== <span class=\"literal\">null</span> &amp;&amp; post.shares &gt; <span class=\"number\">100</span> &amp;&amp; post.likes &gt; <span class=\"number\">500</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FBPosts.filter(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> post.thumbnail !== <span class=\"literal\">null</span> &amp;&amp; post.shares &gt; <span class=\"number\">100</span> &amp;&amp; post.likes &gt; <span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置函数的默认参数\"><a href=\"#设置函数的默认参数\" class=\"headerlink\" title=\"设置函数的默认参数\"></a>设置函数的默认参数</h2><figure class=\"highlight plain\"><figcaption><span>里允许给函数传入默认参数，来构建更加灵活的函数。默认参数会在参数没有被指定（值为 <span style< span></span></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``` js</span><br><span class=\"line\">function greeting(name = &quot;Anonymous&quot;) &#123;</span><br><span class=\"line\">  return &quot;Hello &quot; + name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(greeting(&quot;John&quot;)); // Hello John</span><br><span class=\"line\">console.log(greeting()); // Hello Anonymous</span><br></pre></td></tr></table></figure>\n<h2 id=\"将-rest-操作符与函数参数一起使用\"><a href=\"#将-rest-操作符与函数参数一起使用\" class=\"headerlink\" title=\"将 rest 操作符与函数参数一起使用\"></a>将 rest 操作符与函数参数一起使用</h2><p><span style=\"color:#d14\">ES6</span>推出了用于函数参数的<span style=\"color:#d14\">rest 操作符</span>帮助我们创建更加灵活的函数。在<span style=\"color:#d14\">rest 操作符</span>的帮助下，你可以创建有一个变量来接受多个参数的函数。这些参数被储存在一个可以在函数内部读取的数组中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">howMany</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"You have passed \"</span> + args.length + <span class=\"string\">\" arguments.\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(howMany(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 输出：You have passed 3 arguments.</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(howMany(<span class=\"string\">\"string\"</span>, <span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], &#123; &#125;)); <span class=\"comment\">// 输出：You have passed 4 arguments.</span></span><br></pre></td></tr></table></figure></p>\n<p><span style=\"color:#d14\">rest 操作符</span>可以避免查看<span style=\"color:#d14\">args数组</span>的需求，并且允许我们在参数数组上使用<span style=\"color:#d14\">map()</span>,<span style=\"color:#d14\">filter()</span>，和<span style=\"color:#d14\">reduce()</span>。<br>修改<span style=\"color:#d14\">sum</span>函数，来让它使用<span style=\"color:#d14\">rest 操作符</span>，并且它可以在有任何数量的参数时以相同的形式工作。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  \"use strict\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"> ...args </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></p>\n","thumbnail":"/img/timg3.jpg","categories":[],"tags":[]}